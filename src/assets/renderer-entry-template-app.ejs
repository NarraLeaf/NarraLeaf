/*!
* NarraLeaf v<%= version %>
* Copyright (c) 2025 Nomen (helloyork)
* Licensed under the MPL-2.0 License.
*
* This file is automatically generated by the NarraLeaf CLI.
* All changes made to this file will be overwritten.
*/<%
function escapeJSString(str) {
    if (!str) return str;
    return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/'/g, "\\'");
}

function generateModuleStructure(item, moduleMap, isRoot = false, isProduction = false) {
    if (!item) return 'null';
    
    if ('children' in item) {
        // LayoutDir
        const parts = [];
        parts.push(`name: "${escapeJSString(item.name)}"`);
        if (!isProduction) {
            parts.push(`path: "${escapeJSString(item.path)}"`);
        }
        parts.push(`isSlug: ${item.isSlug}`);
        
        if (item.layout) {
            const moduleId = moduleMap[item.layout.path];
            const layoutParts = [`name: "${escapeJSString(item.layout.name)}"`];
            if (!isProduction) {
                layoutParts.push(`path: "${escapeJSString(item.layout.path)}"`);
            }
            layoutParts.push(`module: __NARRALEAF_IMPORTED_MODULE_${moduleId}`);
            parts.push(`layout: {
                ${layoutParts.join(',\n                ')}
            }`);
        } else {
            parts.push(`layout: null`);
        }
        
        if (item.indexHandler) {
            const moduleId = moduleMap[item.indexHandler.path];
            const indexParts = [`name: "${escapeJSString(item.indexHandler.name)}"`];
            if (!isProduction) {
                indexParts.push(`path: "${escapeJSString(item.indexHandler.path)}"`);
            }
            indexParts.push(`module: __NARRALEAF_IMPORTED_MODULE_${moduleId}`);
            parts.push(`indexHandler: {
                ${indexParts.join(',\n                ')}
            }`);
        } else {
            parts.push(`indexHandler: null`);
        }
        
        const childrenParts = item.children.map(child => generateModuleStructure(child, moduleMap, false, isProduction));
        parts.push(`children: [${childrenParts.join(',\n        ')}]`);
        
        return `{
        ${parts.join(',\n        ')}
    }`;
    } else {
        // PageData
        const moduleId = moduleMap[item.path];
        const pageParts = [`name: "${escapeJSString(item.name)}"`];
        if (!isProduction) {
            pageParts.push(`path: "${escapeJSString(item.path)}"`);
        }
        pageParts.push(`module: __NARRALEAF_IMPORTED_MODULE_${moduleId}`);
        return `{
        ${pageParts.join(',\n        ')}
    }`;
    }
}
%>
/* import */ import React from "react";
/* import */ import { createRoot } from "react-dom/client";
/* import */ import { render } from "narraleaf/client";
/* import */ import * as AppUserEntry from "<%= appPath %>";

<% allPaths.forEach(function(item) { %>/* import */ import * as __NARRALEAF_IMPORTED_MODULE_<%= item.id %> from "<%= item.path %>";
<% }); %>

/**@type {import("narraleaf/client").<%= isProduction ? 'ProductionAppRouterModuleData' : 'AppRouterModuleData' %>} */
const appRouterData = {
    root: <%- generateModuleStructure(appRouterData.root, moduleMap, true, isProduction) %>,
    errorHandler: <%- generateModuleStructure(appRouterData.errorHandler, moduleMap, false, isProduction) %><% if (!isProduction) { %>,
    rootPath: "<%- escapeJSString(appRouterData.rootPath) %>"<% } %>
};

const root = createRoot(document.getElementById("root") as HTMLElement);
!async function () {
    await render({
        renderer: root,
        App: AppUserEntry.default,
        appRouterData,
        metadata: AppUserEntry.metadata,
    });
}();